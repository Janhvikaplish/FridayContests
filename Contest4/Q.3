/*

A permutation — is a sequence of length nn integers from 11 to nn, in which all the numbers occur exactly once. For example, [1][1], [3, 5, 2, 1, 4][3,5,2,1,4], [1, 3, 2][1,3,2] — permutations, and [2, 3, 2][2,3,2], [4, 3, 1][4,3,1], [0][0] — no.

Polycarp was recently gifted a permutation a[1 \dots n]a[1…n] of length nn. Polycarp likes trees more than permutations, so he wants to transform permutation aa into a rooted binary tree. He transforms an array of different integers into a tree as follows:

the maximum element of the array becomes the root of the tree;
all elements to the left of the maximum — form a left subtree (which is built according to the same rules but applied to the left part of the array), but if there are no elements to the left of the maximum, then the root has no left child;
all elements to the right of the maximum — form a right subtree (which is built according to the same rules but applied to the right side of the array), but if there are no elements to the right of the maximum, then the root has no right child.


*/


import java.util.Scanner;
 
public class Main {

    static int n,a[],b[];

    public static void main(String[] args) {

        Scanner sc=new Scanner(System.in);

        for(int t=sc.nextInt();t-->0;)
       {
            a=new int[n=sc.nextInt()];
            b=new int[n];
            for(int i=0;i<n;i++) 
            a[i]=sc.nextInt();
            solve(0,n,0);
            for(int i=0;i<n;i++) 
            System.out.print(b[i]+" ");
            System.out.println();
        }
    }
    static void solve(int l,int r,int d) {
        if(l==r) return;
        int max=l;
        for(int i=l;i<r;i++) 
        if(a[max]<a[i]) max=i;
        b[max]=d;
        solve(l,max,d+1);
        solve(max+1,r,d+1);
    }
}
