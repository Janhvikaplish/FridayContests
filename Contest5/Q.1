/*
Conflicting Values 

DZY has a hash table with p buckets, numbered from 0 to p - 1. He wants to insert n numbers, in the order they are given, into the hash table. For the i-th number xi, DZY will put it into the bucket numbered h(xi), where h(x) is the hash function. In this problem we will assume, that h(x) = x mod p. Operation a mod b denotes taking a remainder after division a by b.
However, each bucket can contain no more than one element. If DZY wants to insert an number into a bucket which is already filled, we say a "conflict" happens. Suppose the first conflict happens right after the i-th insertion, you should output i. If no conflict happens, just output -1.

Examples

Input
10 5
0
21
53
41
53
Output
4
Input
5 5
0
1
2
3
4
Output
-1
*/



import java.util.*;

public class Main {
 
    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       int p=sc.nextInt();
       int n=sc.nextInt();
       int rem[]=new int[300];
       
       for(int i=1;i<=n;i++)
       {
           int x=sc.nextInt();
           int r=x%p;
           if(rem[r]==1)
           {
              System.out.println(i);
              return;
           }
           rem[r]=1;
        }
        
        System.out.println("-1");
      
     }
}
