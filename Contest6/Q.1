/*
Number of Edges 

Mahmoud and Ehab continue their adventures! As everybody in the evil land knows, Dr. Evil likes bipartite graphs, especially trees.
A tree is a connected acyclic graph. A bipartite graph is a graph, whose vertices can be partitioned into 2 sets in such a way, that for each edge (u,â€‰v) that belongs to the graph, u and v belong to different sets. You can find more formal definitions of a tree and a bipartite graph in the notes section below.
Dr. Evil gave Mahmoud and Ehab a tree consisting of n nodes and asked them to add edges to it in such a way, that the graph is still bipartite. Besides, after adding these edges the graph should be simple (doesn't contain loops or multiple edges). What is the maximum number of edges they can add?
A loop is an edge, which connects a node with itself. Graph doesn't contain multiple edges when for each pair of nodes there is no more than one edge between them. A cycle and a loop aren't the same .
*/




import java.io.*;
import java.util.*;
 
public class Bipartite {
	private static List<Integer>[] adj;
	private static long[] bi;
	
	public static void main(String[] args) {
      Scanner in = new Scanner(System.in);
      int n=in.nextInt();
      adj=new List[n];
      for(int i=0; i<n; i++)
        adj[i]=new ArrayList<Integer>();
      for(int i=0; i<n-1; i++) {
        int a=in.nextInt()-1, b=in.nextInt()-1;
        adj[a].add(b);
        adj[b].add(a);
      }
      bi=new long[2];
      dfs(0, 0, 0);
      System.out.println(bi[0]*bi[1]-(n-1));
	}
	
	static void dfs(int node, int parent, int color) {
      bi[color]++;
      for(int i : adj[node])
        if(i!=parent)
          dfs(i, node, color==1?0:1);
	}
}
