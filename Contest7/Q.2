/*
Length of longest path 

You are given an unweighted, undirected tree. Write a program to output the length of the longest path (from one node to another) in that tree. The length of a path in this case is number of edges we traverse from source to destination.

Input
The first line of the input file contains one integer N --- number of nodes in the tree (0 < N <= 10000). Next N-1 lines contain N-1 edges of that tree --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u, v <= N).
Output
Print the length of the longest path on one line.

Example
Input:
3
1 2
2 3
Output:
2
*/


import java.io.*;
import java.util.*;

class Node{
 
      int sym, level;
      ArrayList<Node> arr;

      Node(int sym){
          this.sym=sym;
          arr=new ArrayList<Node>();
      }
 
      public void adj(Node u){
      arr.add(u);
      }
 
}

class Main {

    public static void main(String args[])throws IOException{
     
        BufferedReader r=new BufferedReader(new InputStreamReader(System.in));
        int N=Integer.parseInt(r.readLine());
        Node nodes[]=new Node[N+1];
        visited=new int[N+1];
        tree=new TreeMap<>();
        for(int i=1;i<=N;i++){
            nodes[i]=new Node(i);
        }
       String str[];
       for(int i=1;i<N;i++){
           str=r.readLine().split(" ");
           int u=Integer.parseInt(str[0]);
           int v=Integer.parseInt(str[1]);
           nodes[u].adj(nodes[v]);
           nodes[v].adj(nodes[u]);
        }
       nodes[1].level=0;
       dfs(nodes[1]);
       Node t=tree.get(tree.lastKey());
       tree=new TreeMap<>();
       for(int i=1;i<=N;i++){
           nodes[i].level=0;
           visited[i]=0;
        }
       dfs(t);
       System.out.println(tree.lastKey());
    }
    static int visited[];
    static TreeMap<Integer,Node> tree;

    public static void dfs(Node n){
     
          visited[n.sym]=1;
          Iterator it=n.arr.iterator();
          while(it.hasNext()){
               Node nw=(Node)it.next();
               if(visited[nw.sym]==0){
               nw.level=n.level+1;
               dfs(nw);
           }
    }
         tree.put(n.level,n);
    }
    
}
