/*
Length of subarray 

There's an array A consisting of N non-zero integers A1..N. A subarray of A is called alternating if any two adjacent elements in it have different signs (i.e. one of them should be negative and the other should be positive).
For each x from 1 to N, compute the length of the longest alternating subarray that starts at x - that is, a subarray Ax..y for the maximum possible y â‰¥ x. The length of such a subarray is y-x+1.

*/





import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-- > 0)
		{
		    int n = sc.nextInt();
		    int arr[] = new int[n];
		    for(int i=0;i<n;i++)
		        arr[i] = sc.nextInt();
		    int b[] = new int[n];
		    b[n-1] = 1;
		    for(int i=n-2;i>=0;i--)
		    {
		        if((arr[i+1] < 0 && arr[i] > 0) || (arr[i+1] > 0 && arr[i] < 0))
		            b[i] = b[i+1] + 1;
		        else    b[i] = 1;
		    }
		    for(int i=0;i<n;i++)
		        System.out.print(b[i] +  " ");
		    System.out.println();
		}
	}
}
